import { useQuery } from '@tanstack/react-query';
import { useState } from 'react';
import type {
  OptimizedVulnerabilityApiResponse
} from '../types/vulnerability';
import { fetchVulnerabilityData } from '../services/api';

export const useVulnerabilityData = () => {
  const [progress, setProgress] = useState(0);
  const [isStreaming, setIsStreaming] = useState(false);

  const {
    data,
    isLoading,
    error,
    refetch,
  } = useQuery<OptimizedVulnerabilityApiResponse>({
    queryKey: ['vulnerability-data-optimized'],
    queryFn: async () => {
      setIsStreaming(true);
      setProgress(0);
      
      try {
        const result = await fetchVulnerabilityData((progress) => {
          setProgress(progress);
        });
        
        setIsStreaming(false);
        return result;
      } catch (error) {
        setIsStreaming(false);
        throw error;
      }
    },
    staleTime: 10 * 60 * 1000, // 10 minutes invalidate time
    gcTime: 30 * 60 * 1000, // 30 minutes cache time
    retry: 3,
    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
    refetchOnWindowFocus: false, 
    refetchOnMount: false,
  });

  
  return {
    // Data
    data,
    isLoading,
    error,
    progress,
    isStreaming,
    
    refetch,
  };
};
