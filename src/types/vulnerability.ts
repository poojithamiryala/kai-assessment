// Type definitions for vulnerability data structures
export interface VulnerabilityData {
  name: string;
  groups: Record<string, {
    name: string;
    repos: Record<string, {
      name: string;
      images: Record<string, Vulnerability>;
    }>;
  }>;
}

export interface Vulnerability {
  cve: string;
  severity: string;
  cvss?: number;
  status?: string;
  cause?: string;
  description?: string;
  vecStr?: string;
  exploit?: string;
  riskFactors?: Record<string, any>;
  link?: string;
  type?: string;
  packageName?: string;
  packageVersion?: string;
  packageType?: string;
  layerTime?: string;
  published?: string;
  fixDate?: string;
  applicableRules?: string[];
  owner?: string;
  advisoryType?: string;
  path?: string;
  kaiStatus?: string;
  [key: string]: any; // Safe side to make sure we don't miss any key
}
export interface ProcessedVulnerability extends Vulnerability {
  groupName: string;
  repoName: string;
  imageName: string;
  imageVersion: string;
  baseImage?: string;
  buildType?: string;
  maintainer?: string;
  createTime?: string;
}

export interface DataMetrics {
  totalVulnerabilities: number;
  severityDistribution: Record<string, number>;
  kaiStatusDistribution: Record<string, number>;
  riskFactorDistribution: Record<string, number>;
  groupCount: number;
  repoCount: number;
  imageCount: number;
  // Pre-calculated trend data - month -> severity -> count mapping
  discoveryTrend: Record<string, Record<string, number>>;
  fixTrend: Record<string, Record<string, number>>;
}

// API response types
export interface VulnerabilityApiResponse {
  rawData: VulnerabilityData;
  processedData: ProcessedVulnerability[];
  metrics: DataMetrics;
}


// Storing only the necessary fields to avoid memory issues
export interface OptimizedVulnerability {
  id: string;
  cve: string;
  severity: string;
  kaiStatus: string;
  published: string;
  fixDate?: string;
  description: string;
  groupName: string;
  repoName: string;
  imageName: string;
  imageVersion: string;
  baseImage?: string;
  buildType?: string;
  maintainer?: string;
  createTime?: string;
  riskFactors?: Record<string, any>;
  // Additional fields for efficient filtering
  severityScore: number; // Numeric severity for sorting (5 is highest, 1 is lowest)
  isHighRisk: boolean; // Pre-computed risk flag (true if severity is critical or high)
  isKaiFiltered: boolean; // Pre-computed Kai filter flag (true if kaiStatus is invalid - norisk or ai-invalid-norisk)
}

// Enhanced API response with optimized data
export interface OptimizedVulnerabilityApiResponse {
  rawData: VulnerabilityData;
  processor: any; // VulnerabilityProcessor instance
  metrics: DataMetrics;
}