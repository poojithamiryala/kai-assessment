import React, { useState, useMemo, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  IconButton,
  Tooltip,
  useTheme,
  Paper,
  InputAdornment,
  TablePagination,
  CircularProgress,
} from '@mui/material';
import {
  Search,
  FilterList,
  Visibility,
} from '@mui/icons-material';
import type { OptimizedVulnerability } from '../types/vulnerability';
import { EfficientDataProcessor } from '../utils/efficientDataProcessor';

/**
 * Props for the VulnerabilityTable component
 * This defines what data and functions the table needs to work properly
 */
interface VulnerabilityTableProps {
  vulnerabilities: OptimizedVulnerability[]; // The list of vulnerabilities to display
  activeFilter?: 'none' | 'analysis' | 'ai-analysis'; // Optional filter from the home page
  onRowClick: (vulnerability: OptimizedVulnerability) => void; // Function to call when a row is clicked
  dataProcessor?: EfficientDataProcessor | null; // Optional pre-built data processor for better performance
}


/**
 * VulnerabilityTable Component
 * 
 * This is a powerful, interactive table that displays vulnerability data with:
 * - Real-time search across all vulnerability fields
 * - Filtering by severity, package, repository, and Kai status
 * - Pagination for handling large datasets efficiently
 * - Responsive design that works on all screen sizes
 * 
 * The table is optimized for performance and can handle hundreds of thousands
 * of vulnerabilities without slowing down the browser.
 */
const VulnerabilityTable: React.FC<VulnerabilityTableProps> = ({
  vulnerabilities,
  activeFilter = 'none',
  onRowClick,
  dataProcessor: externalDataProcessor
}) => {
  const theme = useTheme();
  
  
  // State for search - we use debouncing to avoid searching on every keystroke
  const [searchTerm, setSearchTerm] = useState('');
  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState('');
  const [isSearching, setIsSearching] = useState(false);
  
  // State for filters - users can filter by these fields
  const [severityFilter, setSeverityFilter] = useState<string>('');
  const [packageFilter, setPackageFilter] = useState<string>('');
  const [repoFilter, setRepoFilter] = useState<string>('');
  const [kaiStatusFilter, setKaiStatusFilter] = useState<string>('');
  
  // State for pagination - which page we're on and how many rows per page
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(50); // Increased default for large datasets

  // Apply the filter from the home page (if any)
  // This determines which vulnerabilities to show based on the selected filter
  const filteredVulnerabilities = useMemo(() => {
    if (activeFilter === 'none') {
      return vulnerabilities;
    }
    
    const filtered = vulnerabilities.filter(vuln => {
      if (activeFilter === 'analysis') {
        return vuln.kaiStatus === 'invalid - norisk';
      } else if (activeFilter === 'ai-analysis') {
        return vuln.kaiStatus === 'ai-invalid-norisk';
      }
      return true;
    });
    
    
    return filtered;
  }, [vulnerabilities, activeFilter]);

  // Set up our smart data processor for fast searching and filtering
  // This processor creates indexes to make searching super fast, even with huge datasets
  const dataProcessor = useMemo(() => {
    // If we already have a processor from the parent component, use that one
    if (externalDataProcessor) {
      return externalDataProcessor;
    }
    
    // Only create a processor if we have data to work with
    if (filteredVulnerabilities.length === 0) return null;
    
    // Create processor with minimal initial processing
    const processor = new EfficientDataProcessor(filteredVulnerabilities);
    return processor;
  }, [externalDataProcessor, filteredVulnerabilities]);

  // Smart search debouncing - wait for user to stop typing before searching
  // This prevents the table from searching on every keystroke, which would be slow
  useEffect(() => {
    if (searchTerm !== debouncedSearchTerm) {
      setIsSearching(true);
    }
    
    const timer = setTimeout(() => {
      setDebouncedSearchTerm(searchTerm);
      setIsSearching(false);
    }, 500); // Wait 500ms after user stops typing

    return () => {
      clearTimeout(timer);
      setIsSearching(false);
    };
  }, [searchTerm, debouncedSearchTerm]);

  // Get all the unique values for our filter dropdowns
  // This helps us show users what options are available for filtering
  const uniqueValues = useMemo(() => {
    if (!dataProcessor) return { packages: [], repos: [], kaiStatuses: [] };
    return dataProcessor.getUniqueValues();
  }, [dataProcessor]);

  // Extract the unique values for easier use in our filter dropdowns
  const uniquePackages = uniqueValues.packages;
  const uniqueRepos = uniqueValues.repos;
  const uniqueKaiStatuses = uniqueValues.kaiStatuses;

  // The main search and filtering logic - this is where the magic happens!
  // We use our smart data processor to quickly find vulnerabilities that match
  // the user's search term and selected filters
  const searchResults = useMemo(() => {
    if (!dataProcessor) {
      return { results: [], totalCount: 0, stats: { processingTime: 0 } };
    }
    
    // Use our smart processor to search and filter the data
    const results = dataProcessor.search(
      debouncedSearchTerm,
      severityFilter,
      packageFilter,
      repoFilter,
      kaiStatusFilter,
      page,
      rowsPerPage
    );
    return results;
  }, [dataProcessor, debouncedSearchTerm, severityFilter, packageFilter, repoFilter, kaiStatusFilter, page, rowsPerPage]);

  // Extract the results from our search
  const paginatedVulnerabilities = searchResults.results;
  const totalFilteredCount = searchResults.totalCount;


  // Helper function to get the right color for each severity level
  // This makes it easy to see the severity at a glance
  const getSeverityColor = (severity: string) => {
    const colors: Record<string, string> = {
      critical: theme.palette.error.main,
      high: theme.palette.error.main,
      medium: theme.palette.warning.main,
      low: theme.palette.info.main,
      info: theme.palette.grey[500],
    };
    return colors[severity.toLowerCase()] || theme.palette.grey[500];
  };

  const formatDate = (dateString?: string) => {
    if (!dateString) return 'N/A';
    try {
      return new Date(dateString).toLocaleDateString();
    } catch {
      return 'Invalid Date';
    }
  };

  const clearFilters = () => {
    setSearchTerm('');
    setSeverityFilter('');
    setPackageFilter('');
    setRepoFilter('');
    setKaiStatusFilter('');
    setPage(0); // Reset to first page when clearing filters
  };

  const handleChangePage = (_event: unknown, newPage: number) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  // Reset page when filters change
  React.useEffect(() => {
    setPage(0);
  }, [debouncedSearchTerm, severityFilter, packageFilter, repoFilter, kaiStatusFilter]);

  return (
    <Card sx={{ height: '100%' }}>
      <CardContent sx={{ p: 0 }}>
        {/* Header */}
        <Box sx={{ p: 3, borderBottom: `1px solid ${theme.palette.divider}` }}>
          <Typography variant="h6" component="h2" fontWeight="bold" sx={{ mb: 2 }}>
            Vulnerability Listing
          </Typography>
          
          {/* Filters */}
          <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap', alignItems: 'center', mb: 2 }}>
            {/* Search */}
            <TextField
              size="small"
              placeholder="Search CVEs, packages, repos..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    {isSearching ? <CircularProgress size={16} /> : <Search />}
                  </InputAdornment>
                ),
              }}
              sx={{ minWidth: 250 }}
            />

            {/* Severity Filter */}
            <FormControl size="small" sx={{ minWidth: 120 }}>
              <InputLabel>Severity</InputLabel>
              <Select
                value={severityFilter}
                onChange={(e) => setSeverityFilter(e.target.value)}
                label="Severity"
              >
                <MenuItem value="">All</MenuItem>
                <MenuItem value="critical">Critical</MenuItem>
                <MenuItem value="high">High</MenuItem>
                <MenuItem value="medium">Medium</MenuItem>
                <MenuItem value="low">Low</MenuItem>
                <MenuItem value="info">Info</MenuItem>
              </Select>
            </FormControl>

            {/* Package Filter */}
            <FormControl size="small" sx={{ minWidth: 150 }}>
              <InputLabel>Package</InputLabel>
              <Select
                value={packageFilter}
                onChange={(e) => setPackageFilter(e.target.value)}
                label="Package"
              >
                <MenuItem value="">All Packages</MenuItem>
                {uniquePackages.map(pkg => (
                  <MenuItem key={pkg} value={pkg}>{pkg}</MenuItem>
                ))}
              </Select>
            </FormControl>

            {/* Repo Filter */}
            <FormControl size="small" sx={{ minWidth: 150 }}>
              <InputLabel>Repository</InputLabel>
              <Select
                value={repoFilter}
                onChange={(e) => setRepoFilter(e.target.value)}
                label="Repository"
              >
                <MenuItem value="">All Repos</MenuItem>
                {uniqueRepos.map(repo => (
                  <MenuItem key={repo} value={repo}>{repo}</MenuItem>
                ))}
              </Select>
            </FormControl>

            {/* Kai Status Filter */}
            <FormControl size="small" sx={{ minWidth: 120 }}>
              <InputLabel>Kai Status</InputLabel>
              <Select
                value={kaiStatusFilter}
                onChange={(e) => setKaiStatusFilter(e.target.value)}
                label="Kai Status"
              >
                <MenuItem value="">All Status</MenuItem>
                {uniqueKaiStatuses.map(status => (
                  <MenuItem key={status} value={status}>{status}</MenuItem>
                ))}
              </Select>
            </FormControl>

            {/* Clear Filters */}
            <Tooltip title="Clear all filters">
              <IconButton onClick={clearFilters} size="small">
                <FilterList />
              </IconButton>
            </Tooltip>
          </Box>

          {/* Results Count */}
          <Typography variant="body2" color="text.secondary">
            {totalFilteredCount > 0 ? (
              <>
                Showing {Math.min(page * rowsPerPage + 1, totalFilteredCount)}-{Math.min((page + 1) * rowsPerPage, totalFilteredCount)} of {totalFilteredCount.toLocaleString()} vulnerabilities
                {totalFilteredCount !== filteredVulnerabilities.length && 
                  ` (${filteredVulnerabilities.length.toLocaleString()} total)`
                }
              </>
            ) : (
              <>
                {/* Show this when search/filter returns no results */}
                No vulnerabilities found
                {filteredVulnerabilities.length > 0 && ` (${filteredVulnerabilities.length.toLocaleString()} total)`}
              </>
            )}
          </Typography>
        </Box>

        {/* Table */}
        <TableContainer component={Paper} sx={{ maxHeight: 600 }}>
          <Table stickyHeader>
            <TableHead>
              <TableRow>
                <TableCell>CVE ID</TableCell>
                <TableCell>Severity</TableCell>
                <TableCell>Image</TableCell>
                <TableCell>Published</TableCell>
                <TableCell>Fix Date</TableCell>
                <TableCell>Kai Status</TableCell>
                <TableCell>Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {paginatedVulnerabilities.length > 0 ? (
                paginatedVulnerabilities.map((vuln) => (
                <TableRow
                  key={vuln.id}
                  hover
                  onClick={() => onRowClick(vuln)}
                  sx={{ cursor: 'pointer', '&:hover': { backgroundColor: theme.palette.action.hover } }}
                >
                  <TableCell>
                    <Typography variant="body2" fontWeight="medium">
                      {vuln.cve}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Chip
                      label={vuln.severity}
                      size="small"
                      sx={{
                        backgroundColor: getSeverityColor(vuln.severity),
                        color: 'white',
                        fontWeight: 'bold',
                      }}
                    />
                  </TableCell>
                  <TableCell>
                    <Typography variant="body2" noWrap sx={{ maxWidth: 200 }}>
                      {vuln.imageName}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="body2">
                      {formatDate(vuln.published)}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Typography variant="body2">
                      {formatDate(vuln.fixDate)}
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <Chip
                      label={vuln.kaiStatus}
                      size="small"
                      variant="outlined"
                    />
                  </TableCell>
                  <TableCell>
                    <Tooltip title="View Details">
                      <IconButton
                        size="small"
                        onClick={(e) => {
                          e.stopPropagation();
                          onRowClick(vuln);
                        }}
                      >
                        <Visibility />
                      </IconButton>
                    </Tooltip>
                  </TableCell>
                </TableRow>
                ))
              ) : (
                /* Show this row when no vulnerabilities match the search/filter criteria */
                <TableRow>
                  <TableCell colSpan={8} align="center" sx={{ py: 4 }}>
                    <Typography variant="body1" color="text.secondary">
                      No vulnerabilities match your search criteria
                    </Typography>
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </TableContainer>

        {/* Pagination */}
        <TablePagination
          rowsPerPageOptions={[25, 50, 100, 250, 500]}
          component="div"
          count={totalFilteredCount}
          rowsPerPage={rowsPerPage}
          page={page}
          onPageChange={handleChangePage}
          onRowsPerPageChange={handleChangeRowsPerPage}
          labelRowsPerPage="Rows per page:"
          labelDisplayedRows={({ from, to, count }) => 
            `${from}-${to} of ${count !== -1 ? count.toLocaleString() : `more than ${to}`}`
          }
        />
      </CardContent>
    </Card>
  );
};

export default VulnerabilityTable;
