import React, { useMemo, memo, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
  Chip,
  Card,
  CardContent,
  IconButton,
  useTheme,
  CircularProgress,
} from '@mui/material';
import {
  Close,
  Security,
  Warning,
  Info,
  Error,
  CalendarToday,
  Build,
  Storage,
  BugReport,
} from '@mui/icons-material';
import type { OptimizedVulnerability } from '../types/vulnerability';

interface VulnerabilityDetailProps {
  vulnerability: OptimizedVulnerability | null;
  open: boolean;
  onClose: () => void;
}

/**
 * Modal dialog displaying detailed vulnerability information
 */
const VulnerabilityDetail: React.FC<VulnerabilityDetailProps> = memo(({
  vulnerability,
  open,
  onClose,
}) => {
  const theme = useTheme();
  const [isLoading, setIsLoading] = React.useState(false);

  // Memoized data processing for performance
  const processedData = useMemo(() => {
    if (!vulnerability) return null;

    const getSeverityColor = (severity: string) => {
      const colors: Record<string, string> = {
        critical: theme.palette.error.main,
        high: theme.palette.error.main,
        medium: theme.palette.warning.main,
        low: theme.palette.info.main,
        info: theme.palette.grey[500],
      };
      return colors[severity.toLowerCase()] || theme.palette.grey[500];
    };

    const getSeverityIcon = (severity: string) => {
      const icons: Record<string, React.ReactNode> = {
        critical: <Error sx={{ fontSize: 20 }} />,
        high: <Warning sx={{ fontSize: 20 }} />,
        medium: <Warning sx={{ fontSize: 20 }} />,
        low: <Info sx={{ fontSize: 20 }} />,
        info: <Info sx={{ fontSize: 20 }} />,
      };
      return icons[severity.toLowerCase()] || <Info sx={{ fontSize: 20 }} />;
    };

    const formatDate = (dateString?: string) => {
      if (!dateString) return 'Not available';
      try {
        return new Date(dateString).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
        });
      } catch {
        return 'Invalid Date';
      }
    };

    const formatRiskFactors = (riskFactors: Record<string, any> | undefined) => {
      if (!riskFactors || Object.keys(riskFactors).length === 0) {
        return [];
      }
      return Object.keys(riskFactors).map((key) => ({
        key,
        label: `${key}`,
      }));
    };

    // Calculate time between publication and fix
    const timeToFix = (() => {
      if (!vulnerability.published || !vulnerability.fixDate) return null;
      try {
        const published = new Date(vulnerability.published);
        const fixed = new Date(vulnerability.fixDate);
        const diffTime = Math.abs(fixed.getTime() - published.getTime());
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        return `${diffDays} days`;
      } catch {
        return 'Unable to calculate';
      }
    })();

    return {
      severityColor: getSeverityColor(vulnerability.severity),
      severityIcon: getSeverityIcon(vulnerability.severity),
      publishedDate: formatDate(vulnerability.published),
      fixDate: formatDate(vulnerability.fixDate),
      timeToFix,
      riskFactors: formatRiskFactors(vulnerability.riskFactors),
    };
  }, [vulnerability, theme]);

  // loading state for better UX
  useEffect(() => {
    if (open && vulnerability) {
      setIsLoading(true);
      const timer = setTimeout(() => {
        setIsLoading(false);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [open, vulnerability]);

  if (!vulnerability) return null;

  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth="md"
      fullWidth
      PaperProps={{
        sx: {
          borderRadius: 2,
          maxHeight: '90vh',
        },
      }}
    >
      <DialogTitle sx={{ pb: 1 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Typography variant="h5" component="div" fontWeight="bold">
            {vulnerability.cve}
          </Typography>
          <IconButton onClick={onClose} size="small">
            <Close />
          </IconButton>
        </Box>
      </DialogTitle>

      <DialogContent dividers>
        {isLoading ? (
          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 200 }}>
            <CircularProgress />
          </Box>
        ) : (
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
          {/* Basic Information */}
          <Card variant="outlined">
            <CardContent>
              <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <Security />
                Basic Information
              </Typography>
              
              <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr' }, gap: 2 }}>
                <Box>
                  <Typography variant="body2" color="text.secondary">
                    Severity
                  </Typography>
                  <Chip
                    label={vulnerability.severity}
                    icon={processedData?.severityIcon as React.ReactElement}
                    sx={{
                      backgroundColor: processedData?.severityColor,
                      color: 'white',
                      fontWeight: 'bold',
                      mt: 0.5,
                    }}
                  />
                </Box>
                
                <Box>
                  <Typography variant="body2" color="text.secondary">
                    Image
                  </Typography>
                  <Typography variant="body1" sx={{ mt: 0.5, fontWeight: 'medium' }}>
                    {vulnerability.imageName}
                  </Typography>
                </Box>
                
                <Box>
                  <Typography variant="body2" color="text.secondary">
                    Repository
                  </Typography>
                  <Typography variant="body1" sx={{ mt: 0.5, fontWeight: 'medium' }}>
                    {vulnerability.repoName}
                  </Typography>
                </Box>
              </Box>
            </CardContent>
          </Card>

          {/* Dates */}
          <Card variant="outlined">
            <CardContent>
              <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <CalendarToday />
                Timeline
              </Typography>
              
              <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr' }, gap: 2 }}>
                <Box>
                  <Typography variant="body2" color="text.secondary">
                    Published Date
                  </Typography>
                  <Typography variant="body1" sx={{ mt: 0.5 }}>
                    {processedData?.publishedDate}
                  </Typography>
                </Box>
                
                <Box>
                  <Typography variant="body2" color="text.secondary">
                    Fix Date
                  </Typography>
                  <Typography variant="body1" sx={{ mt: 0.5 }}>
                    {processedData?.fixDate}
                  </Typography>
                </Box>
                
                {vulnerability.published && vulnerability.fixDate && (
                  <Box sx={{ gridColumn: { xs: '1', sm: '1 / -1' } }}>
                    <Typography variant="body2" color="text.secondary">
                      Time to Fix
                    </Typography>
                    <Typography variant="body1" sx={{ mt: 0.5 }}>
                      {processedData?.timeToFix || 'Unable to calculate'}
                    </Typography>
                  </Box>
                )}
              </Box>
            </CardContent>
          </Card>

          {/* Status and Kai Analysis */}
          <Card variant="outlined">
            <CardContent>
              <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <Build />
                Status & Analysis
              </Typography>
              
              <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr' }, gap: 2 }}>
                <Box>
                  <Typography variant="body2" color="text.secondary">
                    Kai Status
                  </Typography>
                  <Chip
                    label={vulnerability.kaiStatus}
                    variant="outlined"
                    sx={{ mt: 0.5 }}
                  />
                </Box>
              </Box>
            </CardContent>
          </Card>

          {/* Description */}
          <Card variant="outlined">
            <CardContent>
              <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <BugReport />
                Description
              </Typography>
              <Typography variant="body1" sx={{ whiteSpace: 'pre-wrap' }}>
                {vulnerability.description || 'No description available'}
              </Typography>
            </CardContent>
          </Card>

          {/* Risk Factors */}
          <Card variant="outlined">
            <CardContent>
              <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <Storage />
                Risk Factors
              </Typography>
              <Box sx={{ mt: 1 }}>
                {processedData?.riskFactors && processedData.riskFactors.length > 0 ? (
                  processedData.riskFactors.map(({ key, label }) => (
                    <Chip
                      key={key}
                      label={label}
                      size="small"
                      variant="outlined"
                      sx={{ mr: 1, mb: 1 }}
                    />
                  ))
                ) : (
                  <Typography variant="body2" color="text.secondary">
                    No risk factors available
                  </Typography>
                )}
              </Box>
            </CardContent>
          </Card>
        </Box>
        )}
      </DialogContent>

      <DialogActions sx={{ p: 2 }}>
        <Button onClick={onClose} variant="contained">
          Close
        </Button>
      </DialogActions>
    </Dialog>
  );
});

VulnerabilityDetail.displayName = 'VulnerabilityDetail';

export default VulnerabilityDetail;
