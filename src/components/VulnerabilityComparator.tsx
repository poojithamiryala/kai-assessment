import React from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Box,
  Typography,
  Card,
  CardContent,
  Chip,
  Divider,
  Alert,
  IconButton,
  useTheme,
  useMediaQuery,
} from '@mui/material';
import {
  Close,
  Warning,
  CheckCircle,
  TrendingUp,
} from '@mui/icons-material';
import type { OptimizedVulnerability } from '../types/vulnerability';

interface VulnerabilityComparatorProps {
  vulnerabilities: OptimizedVulnerability[];
  open: boolean;
  onClose: () => void;
}

/**
 * VulnerabilityComparator Component
 * 
 * Provides side-by-side comparison of multiple vulnerabilities with:
 * - Key field comparisons
 * - Contextual insights and differences
 * - Visual aids and trend indicators
 * - Risk assessment highlights
 */
const VulnerabilityComparator: React.FC<VulnerabilityComparatorProps> = ({
  vulnerabilities,
  open,
  onClose,
}) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const isTablet = useMediaQuery(theme.breakpoints.down('md'));
  
  if (vulnerabilities.length === 0) return null;

  // Helper functions for analysis
  const getSeverityColor = (severity: string) => {
    const colors: Record<string, string> = {
      critical: '#d32f2f',
      high: '#f57c00',
      medium: '#fbc02d',
      low: '#388e3c',
    };
    return colors[severity.toLowerCase()] || '#757575';
  };

  const formatDate = (dateString?: string) => {
    if (!dateString) return 'Not available';
    try {
      return new Date(dateString).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
      });
    } catch {
      return 'Invalid Date';
    }
  };

  const calculateTimeToFix = (published?: string, fixDate?: string) => {
    if (!published || !fixDate) return null;
    
    try {
      const publishedDate = new Date(published);
      const fixedDate = new Date(fixDate);
      
      // Check if dates are valid
      if (isNaN(publishedDate.getTime()) || isNaN(fixedDate.getTime())) {
        return null;
      }
      
      // Calculate difference in days
      const diffTime = Math.abs(fixedDate.getTime() - publishedDate.getTime());
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      
      // Handle edge case where dates are the same or very close
      if (diffDays === 0) {
        return 0; // Same day fix
      }
      
      return diffDays;
    } catch (error) {
      console.warn('Error calculating time to fix:', error, { published, fixDate });
      return null;
    }
  };

  const formatTimeToFix = (days: number): string => {
    if (days === 0) return 'Same day';
    
    const years = Math.floor(days / 365);
    const months = Math.floor((days % 365) / 30);
    const remainingDays = Math.floor(days % 30);
    
    const parts: string[] = [];
    
    if (years > 0) {
      parts.push(`${years} year${years > 1 ? 's' : ''}`);
    }
    if (months > 0) {
      parts.push(`${months} month${months > 1 ? 's' : ''}`);
    }
    if (remainingDays > 0 && years === 0) { // Only show days if no years
      parts.push(`${remainingDays} day${remainingDays > 1 ? 's' : ''}`);
    }
    
    return parts.join(', ') || 'Less than a month';
  };

  // Analysis functions for insights
  const getSeverityInsights = () => {
    const severities = vulnerabilities.map(v => v.severity);
    const uniqueSeverities = [...new Set(severities)];
    
    if (uniqueSeverities.length === 1) {
      return {
        type: 'info',
        message: `All vulnerabilities have ${uniqueSeverities[0]} severity`,
        icon: <CheckCircle />,
      };
    }
    
    const severityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
    const maxSeverity = uniqueSeverities.reduce((max, current) => {
      const maxOrder = severityOrder[max as keyof typeof severityOrder] || 0;
      const currentOrder = severityOrder[current as keyof typeof severityOrder] || 0;
      return currentOrder > maxOrder ? current : max;
    });
    
    // Get all unique severities for better context
    const severityList = uniqueSeverities.sort((a, b) => 
      (severityOrder[b as keyof typeof severityOrder] || 0) - (severityOrder[a as keyof typeof severityOrder] || 0)
    );
    
    return {
      type: 'warning',
      message: `Mixed severity levels detected. Highest: ${maxSeverity} (${severityList.join(', ')})`,
      icon: <Warning />,
    };
  };

  const getFixDateInsights = () => {
    const fixDates = vulnerabilities.map(v => v.fixDate).filter(date => date);
    
    if (fixDates.length === 0) {
      return {
        type: 'warning',
        message: 'No fix dates available for comparison',
        icon: <Warning />,
      };
    }
    
    const timeToFixValues = vulnerabilities.map(v => calculateTimeToFix(v.published, v.fixDate)).filter(days => days !== null);
    
    if (timeToFixValues.length > 1) {
      const avgTimeToFix = timeToFixValues.reduce((sum, days) => sum + days!, 0) / timeToFixValues.length;
      const maxTimeToFix = Math.max(...timeToFixValues);
      const minTimeToFix = Math.min(...timeToFixValues);
      
      // Check if all values are the same
      if (maxTimeToFix === minTimeToFix) {
        return {
          type: 'info',
          message: `All vulnerabilities have the same time to fix: ${formatTimeToFix(minTimeToFix)}`,
          icon: <CheckCircle />,
        };
      }
      
      return {
        type: maxTimeToFix - minTimeToFix > 30 ? 'warning' : 'info',
        message: `Time to fix varies: ${formatTimeToFix(minTimeToFix)} - ${formatTimeToFix(maxTimeToFix)} (avg: ${formatTimeToFix(Math.round(avgTimeToFix))})`,
        icon: <TrendingUp />,
      };
    }
    
    return null;
  };

  const getPackageInsights = () => {
    const packages = vulnerabilities.map(v => v.imageName);
    const uniquePackages = [...new Set(packages)];
    
    if (uniquePackages.length === 1) {
      return {
        type: 'info',
        message: `All vulnerabilities affect the same package: ${uniquePackages[0]}`,
        icon: <CheckCircle />,
      };
    }
    
    return {
      type: 'warning',
      message: `Vulnerabilities affect ${uniquePackages.length} different packages`,
      icon: <Warning />,
    };
  };

  const insights = [
    getSeverityInsights(),
    getFixDateInsights(),
    getPackageInsights(),
  ].filter(insight => insight !== null);

  // Responsive grid configuration
  const getDialogMaxWidth = () => {
    if (isMobile) return 'sm';
    if (isTablet) return 'md';
    return 'xl';
  };

  const getDialogWidth = () => {
    if (isMobile) return '100vw';
    if (isTablet) return '90vw';
    return '80vw';
  };

  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth={getDialogMaxWidth()}
      fullWidth
      fullScreen={isMobile}
      PaperProps={{
        sx: {
          minHeight: isMobile ? '100vh' : '80vh',
          maxHeight: isMobile ? '100vh' : '90vh',
          width: getDialogWidth(),
          maxWidth: 'none', // Override maxWidth to allow custom width
          m: isMobile ? 0 : 2,
        },
      }}
    >
      <DialogTitle sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center',
        px: isMobile ? 2 : 3,
        py: isMobile ? 1.5 : 2,
      }}>
        <Typography variant={isMobile ? "h6" : "h5"} component="div">
          Vulnerability Comparison ({vulnerabilities.length} selected)
        </Typography>
        <IconButton onClick={onClose} size="small">
          <Close />
        </IconButton>
      </DialogTitle>

      <DialogContent dividers sx={{ px: isMobile ? 2 : 3 }}>
        {/* Insights Section */}
        {insights.length > 0 && (
          <Box sx={{ mb: 3 }}>
            <Typography variant={isMobile ? "subtitle1" : "h6"} gutterBottom>
              Key Insights
            </Typography>
            <Box sx={{ 
              display: 'grid', 
              gridTemplateColumns: { 
                xs: '1fr', 
                sm: 'repeat(2, 1fr)', 
                md: 'repeat(3, 1fr)' 
              },
              gap: isMobile ? 1 : 2,
            }}>
              {insights.map((insight, index) => (
                <Alert
                  key={index}
                  severity={insight?.type as any}
                  icon={insight?.icon}
                  sx={{ 
                    mb: 1,
                    fontSize: isMobile ? '0.875rem' : '1rem',
                  }}
                >
                  {insight?.message}
                </Alert>
              ))}
            </Box>
            
          </Box>
        )}

        {/* Comparison Grid - Horizontal Scroll */}
        <Box sx={{ 
          display: 'flex',
          gap: 2,
          overflowX: 'auto',
          overflowY: 'hidden',
          pb: 1, // Padding for scrollbar
          mt: vulnerabilities.length > 2 ? 3 : 0, // Add margin when scroll indicator is shown
          position: 'relative',
          '&::-webkit-scrollbar': {
            height: 8,
          },
          '&::-webkit-scrollbar-track': {
            backgroundColor: 'rgba(0,0,0,0.1)',
            borderRadius: 4,
          },
          '&::-webkit-scrollbar-thumb': {
            backgroundColor: 'rgba(0,0,0,0.3)',
            borderRadius: 4,
            '&:hover': {
              backgroundColor: 'rgba(0,0,0,0.5)',
            },
          },
          // Add scroll indicators
          '&::before': {
            content: vulnerabilities.length > 2 ? '"← Scroll to see more vulnerabilities →"' : '""',
            position: 'absolute',
            top: -30,
            left: '50%',
            transform: 'translateX(-50%)',
            fontSize: '0.75rem',
            color: 'text.secondary',
            backgroundColor: 'background.paper',
            px: 2,
            py: 0.5,
            borderRadius: 1,
            border: '1px solid',
            borderColor: 'divider',
            zIndex: 1,
          },
        }}>
          {vulnerabilities.map((vuln) => (
            <Card key={vuln.id} sx={{ 
              minHeight: isMobile ? 300 : 400,
              minWidth: '50%', // Each card takes 50% of dialog width
              maxWidth: '50%', // Prevent cards from growing beyond 50%
              flexShrink: 0, // Prevent cards from shrinking
              overflow: 'hidden',
            }}>
              <CardContent sx={{ p: isMobile ? 1.5 : 2 }}>
                <Box sx={{ 
                  display: 'flex', 
                  justifyContent: 'space-between', 
                  alignItems: 'center', 
                  mb: 2,
                  flexDirection: isMobile ? 'column' : 'row',
                  gap: isMobile ? 1 : 0,
                }}>
                  <Typography 
                    variant={isMobile ? "subtitle1" : "h6"} 
                    component="div"
                    sx={{ 
                      wordBreak: 'break-word',
                      textAlign: isMobile ? 'center' : 'left',
                    }}
                  >
                    {vuln.cve}
                  </Typography>
                  <Chip
                    label={vuln.severity}
                    size="small"
                    sx={{
                      backgroundColor: getSeverityColor(vuln.severity),
                      color: 'white',
                      fontWeight: 'bold',
                      fontSize: isMobile ? '0.75rem' : '0.875rem',
                    }}
                  />
                </Box>

                <Divider sx={{ mb: 2 }} />

                {/* Key Fields */}
                <Box sx={{ mb: 2 }}>
                  <Typography 
                    variant="subtitle2" 
                    color="text.secondary" 
                    gutterBottom
                    sx={{ fontSize: isMobile ? '0.75rem' : '0.875rem' }}
                  >
                    Package
                  </Typography>
                  <Typography 
                    variant="body2" 
                    sx={{ 
                      mb: 1,
                      fontSize: isMobile ? '0.8rem' : '0.875rem',
                      wordBreak: 'break-word',
                    }}
                  >
                    {vuln.imageName}
                  </Typography>

                  <Typography 
                    variant="subtitle2" 
                    color="text.secondary" 
                    gutterBottom
                    sx={{ fontSize: isMobile ? '0.75rem' : '0.875rem' }}
                  >
                    Repository
                  </Typography>
                  <Typography 
                    variant="body2" 
                    sx={{ 
                      mb: 1,
                      fontSize: isMobile ? '0.8rem' : '0.875rem',
                      wordBreak: 'break-word',
                    }}
                  >
                    {vuln.repoName}
                  </Typography>

                  <Typography 
                    variant="subtitle2" 
                    color="text.secondary" 
                    gutterBottom
                    sx={{ fontSize: isMobile ? '0.75rem' : '0.875rem' }}
                  >
                    Severity Level
                  </Typography>
                  <Typography 
                    variant="body2" 
                    sx={{ 
                      mb: 1,
                      fontSize: isMobile ? '0.8rem' : '0.875rem',
                      fontWeight: 'bold',
                      color: getSeverityColor(vuln.severity),
                    }}
                  >
                    {vuln.severity.charAt(0).toUpperCase() + vuln.severity.slice(1)}
                  </Typography>

                  <Typography 
                    variant="subtitle2" 
                    color="text.secondary" 
                    gutterBottom
                    sx={{ fontSize: isMobile ? '0.75rem' : '0.875rem' }}
                  >
                    Published Date
                  </Typography>
                  <Typography 
                    variant="body2" 
                    sx={{ 
                      mb: 1,
                      fontSize: isMobile ? '0.8rem' : '0.875rem',
                    }}
                  >
                    {formatDate(vuln.published)}
                  </Typography>

                  <Typography 
                    variant="subtitle2" 
                    color="text.secondary" 
                    gutterBottom
                    sx={{ fontSize: isMobile ? '0.75rem' : '0.875rem' }}
                  >
                    Fix Date
                  </Typography>
                  <Typography 
                    variant="body2" 
                    sx={{ 
                      mb: 1,
                      fontSize: isMobile ? '0.8rem' : '0.875rem',
                    }}
                  >
                    {formatDate(vuln.fixDate)}
                  </Typography>

                  {calculateTimeToFix(vuln.published, vuln.fixDate) !== null && (
                    <>
                      <Typography 
                        variant="subtitle2" 
                        color="text.secondary" 
                        gutterBottom
                        sx={{ fontSize: isMobile ? '0.75rem' : '0.875rem' }}
                      >
                        Time to Fix
                      </Typography>
                      <Typography 
                        variant="body2" 
                        sx={{ 
                          mb: 1,
                          fontSize: isMobile ? '0.8rem' : '0.875rem',
                        }}
                      >
                        {formatTimeToFix(calculateTimeToFix(vuln.published, vuln.fixDate)!)}
                      </Typography>
                    </>
                  )}

                  <Typography 
                    variant="subtitle2" 
                    color="text.secondary" 
                    gutterBottom
                    sx={{ fontSize: isMobile ? '0.75rem' : '0.875rem' }}
                  >
                    Kai Status
                  </Typography>
                  <Chip
                    label={vuln.kaiStatus}
                    size="small"
                    color={vuln.kaiStatus.includes('invalid') ? 'error' : 'success'}
                    sx={{ 
                      mb: 1,
                      fontSize: isMobile ? '0.7rem' : '0.75rem',
                    }}
                  />

                  <Typography 
                    variant="subtitle2" 
                    color="text.secondary" 
                    gutterBottom
                    sx={{ fontSize: isMobile ? '0.75rem' : '0.875rem' }}
                  >
                    Description
                  </Typography>
                  {/* <Box
                    sx={{
                      maxHeight: isMobile ? 80 : 120,
                      overflowY: 'auto',
                      border: '1px solid',
                      borderColor: 'divider',
                      borderRadius: 1,
                      p: isMobile ? 0.75 : 1,
                      backgroundColor: 'background.paper',
                    }}
                  > */}
                    <Typography 
                      variant="body2" 
                      sx={{ 
                        fontSize: isMobile ? '0.75rem' : '0.875rem', 
                        lineHeight: 1.4,
                        wordBreak: 'break-word',
                      }}
                    >
                      {vuln.description}
                    </Typography>
                  {/* </Box> */}
                </Box>
              </CardContent>
            </Card>
          ))}
        </Box>
      </DialogContent>

      <DialogActions sx={{ 
        px: isMobile ? 2 : 3,
        py: isMobile ? 1.5 : 2,
      }}>
        <Button 
          onClick={onClose} 
          variant="outlined"
          fullWidth={isMobile}
          size={isMobile ? "medium" : "large"}
        >
          Close
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default VulnerabilityComparator;
